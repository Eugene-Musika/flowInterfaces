type RangeError = Error;
type CancellationErrors = Error;
type TimeoutError = Error;
type RejectionError = Error;
type OperationalError = Error;

type ConcurrencyOption = {
  concurrency: number,
};
type SpreadOption = {
  spread: boolean;
};
type BluebirdConfig = {
  warnings?: boolean,
  longStackTraces?: boolean,
  cancellation?: boolean,
  monitoring?: boolean
};

declare module 'bluebird' {
  declare class BluebirdPromiseInspection<T> {
    isCancelled(): bool;
    isFulfilled(): bool;
    isRejected(): bool;
    pending(): bool;
    reason(): any;
    value(): T;
  }

  declare class BluebirdPromise<R> {
    static Defer: Class<Defer>;
    static BluebirdPromiseInspection: Class<BluebirdPromiseInspection>;

    static all<T, Elem: BluebirdPromise<T> | T>(BluebirdPromises: Array<Elem>): BluebirdPromise<Array<T>>;
    static props(input: Object|Map|Promise<Object|Map>): BluebirdPromise;
    static any<T, Elem: BluebirdPromise<T> | T>(BluebirdPromises: Array<Elem>): BluebirdPromise<T>;
    static race<T, Elem: BluebirdPromise<T> | T>(BluebirdPromises: Array<Elem>): BluebirdPromise<T>;
    static reject<T>(error?: any): BluebirdPromise<T>;
    static resolve<T>(object?: BluebirdPromise<T> | T): BluebirdPromise<T>;
    static some<T, Elem: BluebirdPromise<T> | T>(BluebirdPromises: Array<Elem>, count: number): BluebirdPromise<Array<T>>;
    static join<T, Elem: BluebirdPromise<T> | T>(...BluebirdPromises: Array<Elem>): BluebirdPromise<Array<T>>;
    static map<T, U, Elem: BluebirdPromise<T> | T>(
      BluebirdPromises: Array<Elem>,
      mapper: (item: T, index: number, arrayLength: number) => U,
      options?: ConcurrencyOption
    ): BluebirdPromise<Array<U>>;
    static mapSeries<T, U, Elem: BluebirdPromise<T> | T>(
      BluebirdPromises: Array<Elem>,
      mapper: (item: T, index: number, arrayLength: number) => U
    ): BluebirdPromise<Array<U>>;
    static reduce<T, U, Elem: BluebirdPromise<T> | T>(
      BluebirdPromises: Array<Elem>,
      reducer: (total: U, current: T, index: number, arrayLength: number) => U,
      initialValue?: U
    ): BluebirdPromise<U>;
    static filter<T, Elem: BluebirdPromise<T> | T>(
      BluebirdPromises: Array<Elem>,
      filterer: (item: T, index: number, arrayLength: number) => BluebirdPromise<bool>|bool,
      option?: ConcurrencyOption
    ): BluebirdPromise<Array<T>>;
    static each<T, Elem: BluebirdPromise<T> | T>(
      BluebirdPromises: Array<Elem>,
      iterator: (item: T, index: number, arrayLength: number) => BluebirdPromise<mixed>|mixed,
    ): BluebirdPromise<Array<T>>;
    static try<T>(fn: () => T|BluebirdPromise<T>, args: ?Array<any>, ctx: ?any): BluebirdPromise<T>;
    static attempt<T>(fn: () => T|BluebirdPromise<T>, args: ?Array<any>, ctx: ?any): BluebirdPromise<T>;
    static delay<T>(value: T|BluebirdPromise<T>, ms: number): BluebirdPromise<T>;
    static delay(ms: number): BluebirdPromise<void>;
    static config(config: BluebirdConfig): void;


    static defer(): Defer;
    static setScheduler(scheduler: (callback: (...args: Array<any>) => void) => void): void;

    static method<T>(fn: (...args: any) => T): BluebirdPromise<T>;
    static cast<T>(value: T|BluebirdPromise<T>): BluebirdPromise<T>;
    static bind(ctx: any): BluebirdPromise<void>;
    static is(value: any): boolean;
    static longStackTraces(): void;

    static onPossiblyUnhandledRejection(handler: (reason: any) => any): void;



    constructor(callback: (
      resolve: (result?: BluebirdPromise<R> | R) => void,
      reject: (error?: any) => void
    ) => mixed): void;
    then<U>(onFulfill?: (value: R) => BluebirdPromise<U> | U, onReject?: (error: any) => BluebirdPromise<U> | U): BluebirdPromise<U>;
    catch<U>(onReject?: (error: any) => ?BluebirdPromise<U> | U): BluebirdPromise<U>;
    caught<U>(onReject?: (error: any) => ?BluebirdPromise<U> | U): BluebirdPromise<U>;
    error<U>(onReject?: (error: any) => ?BluebirdPromise<U> | U): BluebirdPromise<U>;
    done<U>(onFulfill?: (value: R) => mixed, onReject?: (error: any) => mixed): void;
    finally<T>(onDone?: (value: R) => mixed): BluebirdPromise<T>;
    lastly<T>(onDone?: (value: R) => mixed): BluebirdPromise<T>;
    tap<T>(onDone?: (value: R) => mixed): BluebirdPromise<T>;
    delay(ms: number): BluebirdPromise<R>;
    timeout(ms: number, message?: string): BluebirdPromise<R>;
    cancel(): void;

    bind(ctx: any): BluebirdPromise<R>;
    call(propertyName: string, ...args: Array<any>): BluebirdPromise<any>;
    throw(reason: Error): BluebirdPromise<R>;
    thenThrow(reason: Error): BluebirdPromise<R>;
    all<T>(): BluebirdPromise<Array<T>>;
    any<T>(): BluebirdPromise<T>;
    some<T>(count: number): BluebirdPromise<Array<T>>;
    race<T>(): BluebirdPromise<T>;
    map<T, U>(mapper: (item: T, index: number, arrayLength: number) => BluebirdPromise<U> | U, options?: ConcurrencyOption): BluebirdPromise<Array<U>>;
    mapSeries<T, U>(mapper: (item: T, index: number, arrayLength: number) => BluebirdPromise<U> | U): BluebirdPromise<Array<U>>;
    reduce<T, U>(
      reducer: (total: T, item: U, index: number, arrayLength: number) => BluebirdPromise<T> | T,
      initialValue?: T
    ): BluebirdPromise<T>;
    filter<T>(filterer: (item: T, index: number, arrayLength: number) => BluebirdPromise<bool> | bool, options?: ConcurrencyOption): BluebirdPromise<Array<T>>;
    each<T, U>(iterator: (item: T, index: number, arrayLength: number) => BluebirdPromise<U> | U): BluebirdPromise<Array<T>>;

    reflect(): BluebirdPromise<BluebirdPromiseInspection>;

    isFulfilled(): bool;
    isRejected(): bool;
    isPending(): bool;
    isResolved(): bool;

    value(): R;
    reason(): any;
  }

  declare class Defer {
    BluebirdPromise: BluebirdPromise;
    resolve: (value: any) => any;
    reject: (value: any) => any;
  }
  declare var exports: Class<BluebirdPromise>;
}
